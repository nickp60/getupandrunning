#+title: Getting things working again

Congrats, Nick; you borked your computer again. Nice. classic you, amirite?  Luckily, past-Nick has your back.  Your welcome.


* Installing stuff from ppas
Lets get the basics installed.
#+BEGIN_SRC bash
for prog in i3 i3status i3blocks compton feh thunar rofi htop tree git fonts-font-awesome tmux gnome-tweak-tool terminator exfat-utils exfat-fuse emacs indicator-multiload fonts-inconsolata chromium-browser xbacklight
do
  sudo apt install $prog -y
done

sudo add-apt-repository ppa:kgilmer/speed-ricer
sudo apt-get update
sudo apt-get install i3-gaps


#+END_SRC


And also these,n which you will need later for certian R packages:

#+BEGIN_SRC bash
for prog in libssl-dev libxml2-dev libcurl4-openssl-dev
do
  sudo apt install $prog -y
done

#+END_SRC

* Gcloud tools

#+BEGIN_SRC bash

echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
sudo apt-get install apt-transport-https ca-certificates gnupg
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
sudo apt-get update && sudo apt-get install google-cloud-sdk
#+END_SRC


* Docker

#+BEGIN_SRC bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io~
#+END_SRC


* Conda
Now, lets get miniconda installed
#+BEGIN_SRC bash
 wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh
conda config --add channels defaults
conda config --add channels conda-forge
conda config --add channels bioconda

#+END_SRC

* profile, etc:
first, grab `bash_preexec.sh1`
#+BEGIN_SRC
curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh
#+END_SRC


Lets get your profiles sorted out.
#+BEGIN_SRC bash
echo "source .nickstuff" >> ~/.bashrc
#+END_SRC

* emacs packages
Right, now you need to install some emacs packages that arent on MELPA.  These should be included in the repo, but if not, here ya go.

#+BEGIN_SRC bash

cd ~/.emacs.d/various/
# column marker package
wget https://www.emacswiki.org/emacs/download/column-marker.el


#+END_SRC

For python syntax checking, ensure that you have pycodestyle (formerly pep8) and pylint installed.


** MELPA packages
for other packages to install, see the init file.  Heres the ones I remember:

- flymake
- ox-gfm
- ess
-

** issues
Sometime, if you have switched versions, you will need to run the following cmds to get rid of some compiled files
#+BEGIN_SRC bash
cd ~/.emacs.d/
find . -name '*.elc' | xargs rm
#+END_SRC

* Various packages
Add ~/bin/, and add it to your path, moron.

** Bandage
https://rrwick.github.io/Bandage/
#+BEGIN_SRC bash
https://github.com/rrwick/Bandage/releases/download/v0.8.1/Bandage_Ubuntu_dynamic_v0_8_1.zip
#+END_SRC

* TinyTex
See installation from https://yihui.name/tinytex/
#+BEGIN_SRC
wget -qO- \
  "https://github.com/yihui/tinytex/raw/master/tools/install-unx.sh" | sh

tlmgr install texliveonfly

#+END_SRC
* R
Someone else did the hard work for you.  Download this gist, and run it:
https://gist.github.com/mGalarnyk/41c887e921e712baf86fecc507b3afc7
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/
sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'
sudo apt-get update
sudo apt-get install r-base
sudo apt-get install gdebi-core
# go download the latest rstudio from browser
sudo gdebi ~/Downloads/rstudio-1.3.1073-amd64.deb
rm ~/Downloads/*.deb


* i3

All of the i3 config info should be in the .config directory.

To setup, clone this repo, delete your exisiting (mostly empty) config dir, and symlink the one in this repo
#+BEGIN_SRC
for thing in i3 .nickstuff .tmux.conf 
do 
   ln -s ~/GitHub/getupandrunning/${thing} ~/
done


#+END_SRC
* TravisCI
This shouldn't be a surprise, but you don't know much about cryptography, so it is.  You will need to update all the travis encrpted creds whenever you try to deply to pypi again.  So you will need to install travis:

#+BEGIN_SRC bash
gem install travis

travis encrypt **********
#+END_SRC

replace the existing credentials with this, and then deploy.
